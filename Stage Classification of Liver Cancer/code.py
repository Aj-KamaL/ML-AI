# -*- coding: utf-8 -*-
"""Untitled3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1TFOt8Z1VxET3aoHORC39j59Cb4zxBB8u
"""

import xgboost as xgb
from sklearn.ensemble import ExtraTreesClassifier
import matplotlib.image as mpimg
import numpy as np
import sys
import os
import gzip
import math
import matplotlib.pyplot as plt
import random
import copy
from sklearn.decomposition import PCA, KernelPCA
import csv
import pandas as pd
import seaborn as sns
import cv2
import glob
import pickle
import scipy
from sklearn.naive_bayes import GaussianNB
from sklearn.tree import DecisionTreeClassifier
from sklearn.neural_network import MLPClassifier
from sklearn.decomposition import PCA
from sklearn.neural_network import MLPClassifier
from sklearn.discriminant_analysis import LinearDiscriminantAnalysis
from sklearn.ensemble import AdaBoostClassifier
from sklearn.ensemble import BaggingClassifier
from sklearn.metrics import roc_auc_score
from sklearn import metrics
from sklearn.neighbors import KNeighborsClassifier
import scipy
import scipy.misc
import re
from sklearn.svm import SVC
from PIL import Image
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import cross_val_score

from skimage import io
from skimage.color import rgb2gray
from skimage.transform import resize
from skimage.feature import hog
from sklearn import tree
from sklearn.linear_model import Lasso
import sklearn as sk
from sklearn import svm
from sklearn.metrics import confusion_matrix
import pandas as pd
import os
from sklearn.tree import DecisionTreeClassifier
from sklearn.model_selection import train_test_split
from sklearn import metrics
from sklearn.feature_selection import VarianceThreshold
from sklearn.decomposition import PCA
from sklearn.preprocessing import StandardScaler
from sklearn.preprocessing import QuantileTransformer
import matplotlib.pyplot as plt
from sklearn.feature_selection import SelectKBest
from sklearn.feature_selection import chi2
from sklearn.feature_selection import RFE
from sklearn.linear_model import LogisticRegression
from sklearn.feature_selection import RFECV
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import StratifiedKFold
import pandas as pd
from sklearn.model_selection import cross_validate
import numpy as np
from sklearn.svm import LinearSVC
from sklearn.linear_model import Lasso
from sklearn.feature_selection import SelectFromModel
from sklearn.metrics import matthews_corrcoef
from sklearn.ensemble import GradientBoostingClassifier
#unzip dataset.zip before running code to obtain train and test CSVs'
xdata=pd.read_csv("./train.csv")
ydata=pd.read_csv("./test.csv")

xlab=xdata['Label']
xid=xdata['id']
yid=ydata['id']
pdA=xdata.drop(['Label','id'], axis = 1)
pdB=ydata.drop(['id'], axis = 1)

print(np.array(xdata).shape)
print(np.array(ydata).shape)
A=np.array(pdA)
B=np.array(pdB)
xlab=np.array(xlab)
xid=np.array(xid)
yid=np.array(yid)
print(A.shape)
print(B.shape)

constant_filter = VarianceThreshold(0.1)
constant_filter.fit(np.concatenate((pdA,pdB)))

print(len(pdA.columns[constant_filter.get_support()]))

constant_columns = [column for column in pdA.columns
                    if column not in pdA.columns[constant_filter.get_support()]]
pdA.drop(labels=constant_columns, axis=1, inplace=True)
pdB.drop(labels=constant_columns, axis=1, inplace=True)
C=np.array(pdA)
D=np.array(pdB)
print(C.shape,D.shape)

corr_matrix = pdA.corr().abs()
upper = corr_matrix.where(np.triu(np.ones(corr_matrix.shape), k=1).astype(np.bool))
to_drop = [column for column in upper.columns if any(upper[column] > 0.95)]
print(len(to_drop))
pdA.drop(labels=to_drop, axis=1, inplace=True)
pdB.drop(labels=to_drop, axis=1, inplace=True)
G=np.array(pdA)
H=np.array(pdB)
print(G.shape,H.shape)

print(G.shape,H.shape)

pca = KernelPCA(n_components=95)
pca.fit(np.concatenate((G,H)))
GG = pca.transform(G)
HH = pca.transform(H)
print(GG.shape,HH.shape)

clf= MLPClassifier(max_iter=2000)
from sklearn.model_selection import ShuffleSplit
ss=ShuffleSplit(n_splits=20, test_size=0.5, random_state=10)
scores = cross_val_score(clf, GG,xlab, cv=ss,n_jobs=-1, verbose=1)
print(np.mean(scores))
print(scores) 
clf.fit(GG, xlab)

pred= clf.predict(HH)
print (len(pred))
ids= np.arange(3001, 3072)
df= pd.DataFrame(ids, columns= ["id"])
df['Label']= pred
df.to_csv('./subm.csv', index= False)
